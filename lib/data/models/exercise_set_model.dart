import '../../domain/entities/exercise_set.dart';

/// Data model for exercise_sets table
/// Handles SQLite representation and conversion to/from domain entities
class ExerciseSetModel {
  final int? id; // Auto-generated by SQLite
  final int exerciseId; // Foreign key to workout_exercises table
  final int setNumber; // Order within the exercise (1, 2, 3, etc.)
  final int reps; // Number of repetitions
  final int? weight; // Weight used (null for bodyweight)
  final int? restTimeSeconds; // Rest time after this set (in seconds)
  final String setType; // Type of set (regular, warmup, etc.)

  const ExerciseSetModel({
    this.id,
    required this.exerciseId,
    required this.setNumber,
    required this.reps,
    this.weight,
    this.restTimeSeconds,
    this.setType = 'regular',
  });

  // Convert from domain entity to data model
  factory ExerciseSetModel.fromEntity(ExerciseSet entity, int exerciseId) {
    return ExerciseSetModel(
      id: entity.id.isNotEmpty ? int.tryParse(entity.id) : null,
      exerciseId: exerciseId,
      setNumber: entity.setNumber,
      reps: entity.reps,
      weight: entity.weight,
      restTimeSeconds: entity.restTime?.inSeconds,
      setType: entity.setType.name,
    );
  }

  // Convert from SQLite Map to data model
  factory ExerciseSetModel.fromMap(Map<String, dynamic> map) {
    return ExerciseSetModel(
      id: map['id'] as int?,
      exerciseId: map['workout_exercise_id'] as int,
      setNumber: map['set_number'] as int,
      reps: map['reps'] as int,
      weight: map['weight'] as int?,
      restTimeSeconds: map['rest_time_seconds'] as int?,
      setType: map['set_type'] as String? ?? 'regular',
    );
  }

  // Convert from data model to domain entity
  ExerciseSet toEntity() {
    return ExerciseSet(
      id: id?.toString() ?? '',
      setNumber: setNumber,
      reps: reps,
      weight: weight,
      restTime: restTimeSeconds != null ? Duration(seconds: restTimeSeconds!) : null,
      setType: SetType.values.firstWhere((e) => e.name == setType, orElse: () => SetType.working),
    );
  }

  // Convert from data model to SQLite Map
  Map<String, dynamic> toMap() {
    return {
      if (id != null) 'id': id,
      'workout_exercise_id': exerciseId,
      'set_number': setNumber,
      'reps': reps,
      'weight': weight,
      'rest_time_seconds': restTimeSeconds,
      'set_type': setType,
    };
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) || other is ExerciseSetModel && runtimeType == other.runtimeType && id == other.id;

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() => 'ExerciseSetModel(id: $id, workoutExerciseId: $exerciseId, set: $setNumber)';
}
